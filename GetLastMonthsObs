#!/bin/sh
#
# This script collects a month's daily weather obsernations
# for a given Australian BOM station.
#
# For any station the BOM makes available the current month 
# and the previous 13 month's data.
# Therefore n can be between 0 and 13.
#
# The default is n=1, ie. last months data.
#
# usage : ./GetLastMonthsObs.sh --help --? --version n
#         n is the month to collect, between 0 and 13 months ago.
#
# Depends: wget

#Defining some variables
PROGRAM=`basename $0`
VERSION=0.2

station=IDCJDW6061
#see this list: https://www.seegrid.csiro.au/subversion/ASRDC/BOM/SIMS/data/anzlic_20110825.txt for numbers.

error ()
{
    echo "$@" 1>&2
    usage_and_exit 1
}

 
usage ()
{
    printf "Usage: $PROGRAM [--help] [--?] [--version] n
         Where n is the month to collect, between 0 and 13 months ago.
         The default is 1 (last month). \n"
}

usage_and_exit () 
{
    usage
    exit $1
}

version ()
{
    echo "$PROGRAM version $VERSION"
}

failure ()
{
    #uncomment this function below if you need to see what the\
    # variables are really doing
    printf "    $PROGRAM version $VERSION
    Options : $@
    OS : $os
    Year : $yr
    Current month : $month
    Months back : $pm    
    Month-Months back : $mpm
    Previous month : $lm
    Month length : $count \n"
}


darwin()
{
    #If yau don't have a very current OSX then you'll need to get wget
    #depending on how you do this it might end up in somewhere other 
    #than /usr/bin

    OLDPATH=$PATH

    os=`uname`

    if [ $os = 'Darwin' ]
     then PATH=/bin:/usr/bin:/usr/local/bin
     else PATH=/bin:/usr/bin
    fi

    export PATH
}

#pass command line options
while test $# -gt 0
do
    case $1 in
    --help | --hel | --he | --h | --? | -? | -h | -he | -hel | -help )
        usage_and_exit 0
	;;
    --version | --versio | --versi | --vers | --ver | --ve | --v | \
    -version | -versio | -versi | -vers | -ver | -ve | -v )
        version
	exit 0
	;;
    --debug | --debu | --deb | --de | --d | -debug | -debu | -deb \
    | -de | -d )
       failure
       exit 2
       ;;
    -*)
        error "Unrecognised option: $1"
	;;
    *)
	break
	;;
    esac
    shift
done

darwin

#get this month
month=`date +%m`  #Comment this line for testing different months
#month=06         #Uncomment this line for testing different months

#get this year
yr=`date +%Y`

#how many months ago?
#sanity check on n
## is there anything to check? and is it in bounds (0-13)
n=$@

if [ -n "$n" ]
 then if [ $n -ge '0' ] && [ $n -le '13' ]
       then pm=$n
       else usage_and_exit 1 
      fi 
 else pm=1
fi

#Adjust years and bits for $month-$pm
mpm=`expr $month - $pm`
#echo $mpm
#The month you want is this year
lm=$month

#The month you want is last year
if [ $mpm -le '0' ] && [ $mpm != '-12' ]
 then yr=`expr $yr - 1`
      lm=`expr $mpm + 12`
fi
#The month you want is two years ago
if [ $mpm -le 0 ] && [ $mpm = '-12' ]
 then yr=`expr $yr - 2` 
      lm=12
fi

#old bits
#If month 01, then last month is 12 not 0
#if [ $month = '01' ]
# then lm=12  yr=`expr $yr - 1`
# else lm=`expr $month - 1`
#fi

#We need 07 not just plain 7
count=${#lm}

if [ $count = 1 ]
 then lm=0$lm
fi

#Uncomment the line below for testing purposes
#failure

wget http://www.bom.gov.au/climate/dwo/$yr${lm}/text/${station}.$yr${lm}.csv
