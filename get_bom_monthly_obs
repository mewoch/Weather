#!/bin/sh
#
# This script collects a month's daily weather obsernations
# for a given Australian BOM station.
#
# For any station the BOM makes available the current month 
# and the previous 13 month's data.
# Therefore n and m can be between 0 and 13.
#
# The default is n=1, m=1; ie. only last month's data.
#
# usage : ./GetLastMonthsObs.sh --help --? --version n m
#         n is the first month, and m is the last month to collect.
#         n and m can be between 0 and 13 months ago.
#
# Depends: wget

#Defining some variables
PROGRAM=`basename $0`
VERSION=0.3.0

station=IDCJDW6061
# see this list:
# https://www.seegrid.csiro.au/subversion/ASRDC/BOM/SIMS/data/anzlic_20110825.txt
# for numbers or the "Recent Months" link off your local station's
# observations page.

error ()
{
    echo "$@" 1>&2
    usage_and_exit 1
}

 
usage ()
{
    printf "Usage: $PROGRAM [--help] [--?] [--version] n
         Where n is the first month and m is the last month to collect.
	 n and m can be between 0 and 13 months ago.
         The default case is 1 (last month). \n"
}

usage_and_exit () 
{
    usage
    exit $1
}

version ()
{
    echo "$PROGRAM version $VERSION"
}

failure ()
{
    #uncomment this function below if you need to see what the\
    # variables are really doing
    printf "    $PROGRAM version $VERSION
    Options : $options
    OS : $os
    Year : $yr
    Current month : $month
    First month back : $n
    Last month back : $m
    Last-First month : $delta
    Month-Months back : $mpm
    First Previous Month : $lm_start
    Previous month : $lm
    Month length : $count \n"
}

pad ()
{
#We need 07 not just plain 7
count=${#lm}

if [ $count = 1 ]
 then lm=0$lm
fi
}

darwin()
{
    #If yau don't have a very current OSX then you'll need to get wget
    #depending on how you do this it might end up in somewhere other 
    #than /usr/bin

    OLDPATH=$PATH

    os=`uname`

    if [ $os = 'Darwin' ]
     then PATH=/bin:/usr/bin:/usr/local/bin
     else PATH=/bin:/usr/bin
    fi

    export PATH
}

#pass command line options
options=$@		#for testing purposes only
while test $# -gt 0
do
    case $1 in
    --help | --hel | --he | --h | --? | -? | -h | -he | -hel | -help )
        usage_and_exit 0
	;;
    --version | --versio | --versi | --vers | --ver | --ve | --v | \
    -version | -versio | -versi | -vers | -ver | -ve | -v )
        version
	exit 0
	;;
    --debug | --debu | --deb | --de | --d | -debug | -debu | -deb \
    | -de | -d )
       failure
       exit 2
       ;;
    -*)
        error "Unrecognised option: $1"
	;;
    *)
	break
	;;
    esac
    shift
done

IFS='
	 '
darwin

#get this month
month=`date +%m`  #Comment this line for testing different months
#month=06         #Uncomment this line for testing different months

#get this year
yr=`date +%Y`

#inital state for n and m
n=1
m=1

#sanity check
## are there different months to check?
if [ $# -gt 0 ]
 then
##is n in bounds (0-13)?
  if [ $1 -lt '0' ] || [ $1 -gt '13' ]
   then error "First month not between 0 and 13"
        usage_and_exit 1
   else n=$1
  fi
fi
##is m in bounds (0-13)?
if [ ${#2} -gt 0 ]
 then
  if [ $2 -lt '0' ] || [ $2 -gt '13' ]
   then error "Last month not between 0 and 13"
        usage_and_exit 1
   else m=$2
  fi
 else m=$n
fi
##is n>m?
###this becomes the counter for loop
delta=`expr $m - $n`
if [ $delta -lt 0 ]
 then error "First month bigger than last month"
      usage_and_exit 2
fi

#Adjust years and bits for $month-$pm
mpm=`expr $month - $n`

##The month you want is this year
lm=$month

##The month you want is last year
if [ $mpm -le '0' ] && [ $mpm != '-12' ]
 then yr=`expr $yr - 1`
      lm=`expr $mpm + 12`
fi
#The month you want is two years ago
if [ $mpm -le 0 ] && [ $mpm = '-12' ]
 then yr=`expr $yr - 2` 
      lm=12
fi

##make sure the month is 2 digits long
pad

#Uncomment the line below for testing purposes
lm_start=$lm           #for testing purposes
#failure

#need to build loop here
while [ $delta -ge '0' ]
 do
 wget http://www.bom.gov.au/climate/dwo/$yr${lm}/text/${station}.$yr${lm}.csv
 delta=`expr $delta - 1`
 lm=`expr $lm - 1`
#eventually we get to Jan ($lm=1), and we need to jump to Dec (lm=12)
# in the previous year
 if [ $lm = 0 ]
  then lm=12
       yr=`expr $yr - 1`
fi
pad
#uncomment the line below for testing purposes
failure
done
